#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ inpainting
"""

import requests
import base64
import json
import os
from PIL import Image
import io

def image_to_base64(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode()

def save_base64_image(base64_string, output_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    img_data = base64.b64decode(base64_string)
    with open(output_path, "wb") as f:
        f.write(img_data)

def test_mask_parameters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    endpoint = os.environ.get("RUNPOD_ENDPOINT", "http://localhost:8080/run")
    api_key = os.environ.get("RUNPOD_API_KEY", "")
    
    image_path = "test_input/image1.png"
    mask_path = "test_input/image1_mask001.png"
    
    if not os.path.exists(image_path) or not os.path.exists(mask_path):
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    image_b64 = image_to_base64(image_path)
    mask_b64 = image_to_base64(mask_path)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_configs = [
        {
            "name": "default",
            "params": {}
        },
        {
            "name": "no_blur",
            "params": {"blur_edges": False}
        },
        {
            "name": "light_blur",
            "params": {"blur_edges": True, "blur_radius": 3, "feather_amount": 0.05}
        },
        {
            "name": "medium_blur",
            "params": {"blur_edges": True, "blur_radius": 5, "feather_amount": 0.1}
        },
        {
            "name": "heavy_blur",
            "params": {"blur_edges": True, "blur_radius": 8, "feather_amount": 0.2}
        },
        {
            "name": "extra_smooth",
            "params": {"blur_edges": True, "blur_radius": 10, "feather_amount": 0.3}
        }
    ]
    
    headers = {"Content-Type": "application/json"}
    if api_key:
        headers["Authorization"] = f"Bearer {api_key}"
    
    os.makedirs("outputs", exist_ok=True)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏...")
    print("=" * 60)
    
    for config in test_configs:
        print(f"\nüìã –¢–µ—Å—Ç: {config['name']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {config['params']}")
        
        payload = {
            "input": {
                "image": image_b64,
                "mask": mask_b64,
                **config['params']
            }
        }
        
        try:
            response = requests.post(endpoint, headers=headers, json=payload, timeout=120)
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get("status") == "ok":
                    output_path = f"outputs/mask_test_{config['name']}.png"
                    save_base64_image(result["image_base64"], output_path)
                    
                    metadata = result.get("metadata", {})
                    mask_info = metadata.get("mask_processing", {})
                    
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏: {mask_info}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'outputs' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

if __name__ == "__main__":
    test_mask_parameters()
